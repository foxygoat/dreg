// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegistryClient is the client API for Registry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistryClient interface {
	// https://docs.docker.com/registry/spec/api/#api-version-check
	CheckV2(ctx context.Context, in *CheckV2Request, opts ...grpc.CallOption) (*CheckV2Response, error)
	// https://docs.docker.com/registry/spec/api/#listing-repositories
	ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesResponse, error)
	// https://docs.docker.com/registry/spec/api/#listing-image-tags
	ListImageTags(ctx context.Context, in *ListImageTagsRequest, opts ...grpc.CallOption) (*ListImageTagsResponse, error)
	// https://docs.docker.com/registry/spec/api/#manifest
	// https://docs.docker.com/registry/spec/manifest-v2-2/#image-manifest-field-descriptions
	GetDigest(ctx context.Context, in *GetDigestRequest, opts ...grpc.CallOption) (*GetDigestResponse, error)
	// https://docs.docker.com/registry/spec/api/#manifest
	// https://docs.docker.com/registry/spec/manifest-v2-2/#image-manifest-field-descriptions
	GetManifest(ctx context.Context, in *GetManifestRequest, opts ...grpc.CallOption) (*GetManifestResponse, error)
	// https://docs.docker.com/registry/spec/api/#deleting-an-image
	DeleteImage(ctx context.Context, in *DeleteImageRequest, opts ...grpc.CallOption) (*DeleteImageResponse, error)
}

type registryClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistryClient(cc grpc.ClientConnInterface) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) CheckV2(ctx context.Context, in *CheckV2Request, opts ...grpc.CallOption) (*CheckV2Response, error) {
	out := new(CheckV2Response)
	err := c.cc.Invoke(ctx, "/foxygoat.dreg.Registry/CheckV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesResponse, error) {
	out := new(ListRepositoriesResponse)
	err := c.cc.Invoke(ctx, "/foxygoat.dreg.Registry/ListRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ListImageTags(ctx context.Context, in *ListImageTagsRequest, opts ...grpc.CallOption) (*ListImageTagsResponse, error) {
	out := new(ListImageTagsResponse)
	err := c.cc.Invoke(ctx, "/foxygoat.dreg.Registry/ListImageTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetDigest(ctx context.Context, in *GetDigestRequest, opts ...grpc.CallOption) (*GetDigestResponse, error) {
	out := new(GetDigestResponse)
	err := c.cc.Invoke(ctx, "/foxygoat.dreg.Registry/GetDigest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetManifest(ctx context.Context, in *GetManifestRequest, opts ...grpc.CallOption) (*GetManifestResponse, error) {
	out := new(GetManifestResponse)
	err := c.cc.Invoke(ctx, "/foxygoat.dreg.Registry/GetManifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) DeleteImage(ctx context.Context, in *DeleteImageRequest, opts ...grpc.CallOption) (*DeleteImageResponse, error) {
	out := new(DeleteImageResponse)
	err := c.cc.Invoke(ctx, "/foxygoat.dreg.Registry/DeleteImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServer is the server API for Registry service.
// All implementations must embed UnimplementedRegistryServer
// for forward compatibility
type RegistryServer interface {
	// https://docs.docker.com/registry/spec/api/#api-version-check
	CheckV2(context.Context, *CheckV2Request) (*CheckV2Response, error)
	// https://docs.docker.com/registry/spec/api/#listing-repositories
	ListRepositories(context.Context, *ListRepositoriesRequest) (*ListRepositoriesResponse, error)
	// https://docs.docker.com/registry/spec/api/#listing-image-tags
	ListImageTags(context.Context, *ListImageTagsRequest) (*ListImageTagsResponse, error)
	// https://docs.docker.com/registry/spec/api/#manifest
	// https://docs.docker.com/registry/spec/manifest-v2-2/#image-manifest-field-descriptions
	GetDigest(context.Context, *GetDigestRequest) (*GetDigestResponse, error)
	// https://docs.docker.com/registry/spec/api/#manifest
	// https://docs.docker.com/registry/spec/manifest-v2-2/#image-manifest-field-descriptions
	GetManifest(context.Context, *GetManifestRequest) (*GetManifestResponse, error)
	// https://docs.docker.com/registry/spec/api/#deleting-an-image
	DeleteImage(context.Context, *DeleteImageRequest) (*DeleteImageResponse, error)
	mustEmbedUnimplementedRegistryServer()
}

// UnimplementedRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedRegistryServer struct {
}

func (UnimplementedRegistryServer) CheckV2(context.Context, *CheckV2Request) (*CheckV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckV2 not implemented")
}
func (UnimplementedRegistryServer) ListRepositories(context.Context, *ListRepositoriesRequest) (*ListRepositoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepositories not implemented")
}
func (UnimplementedRegistryServer) ListImageTags(context.Context, *ListImageTagsRequest) (*ListImageTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImageTags not implemented")
}
func (UnimplementedRegistryServer) GetDigest(context.Context, *GetDigestRequest) (*GetDigestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDigest not implemented")
}
func (UnimplementedRegistryServer) GetManifest(context.Context, *GetManifestRequest) (*GetManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManifest not implemented")
}
func (UnimplementedRegistryServer) DeleteImage(context.Context, *DeleteImageRequest) (*DeleteImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImage not implemented")
}
func (UnimplementedRegistryServer) mustEmbedUnimplementedRegistryServer() {}

// UnsafeRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistryServer will
// result in compilation errors.
type UnsafeRegistryServer interface {
	mustEmbedUnimplementedRegistryServer()
}

func RegisterRegistryServer(s grpc.ServiceRegistrar, srv RegistryServer) {
	s.RegisterService(&Registry_ServiceDesc, srv)
}

func _Registry_CheckV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).CheckV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/foxygoat.dreg.Registry/CheckV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).CheckV2(ctx, req.(*CheckV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ListRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ListRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/foxygoat.dreg.Registry/ListRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ListRepositories(ctx, req.(*ListRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ListImageTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListImageTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ListImageTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/foxygoat.dreg.Registry/ListImageTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ListImageTags(ctx, req.(*ListImageTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetDigest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDigestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetDigest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/foxygoat.dreg.Registry/GetDigest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetDigest(ctx, req.(*GetDigestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/foxygoat.dreg.Registry/GetManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetManifest(ctx, req.(*GetManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_DeleteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).DeleteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/foxygoat.dreg.Registry/DeleteImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).DeleteImage(ctx, req.(*DeleteImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Registry_ServiceDesc is the grpc.ServiceDesc for Registry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Registry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "foxygoat.dreg.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckV2",
			Handler:    _Registry_CheckV2_Handler,
		},
		{
			MethodName: "ListRepositories",
			Handler:    _Registry_ListRepositories_Handler,
		},
		{
			MethodName: "ListImageTags",
			Handler:    _Registry_ListImageTags_Handler,
		},
		{
			MethodName: "GetDigest",
			Handler:    _Registry_GetDigest_Handler,
		},
		{
			MethodName: "GetManifest",
			Handler:    _Registry_GetManifest_Handler,
		},
		{
			MethodName: "DeleteImage",
			Handler:    _Registry_DeleteImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry.proto",
}
